7. 
== => compares value of variables ex.
a = 10, b = "10", a == b, True. (loose comparison)

=== => compares value and data type of variables
ex. a = 10, b = "10", a === b, False. (strict comparison)

var is function scoped  &&  let is block scoped.
var variables are hoisted.
let => declare before use. Can't be redeclared ex.
let a = 10;
let a = 11;
error,
expect in web console - https://stackoverflow.com/questions/64582489/why-can-let-be-re-declared-in-the-devtools-console-in-chrome-other-browsers

semi colons ; -> let programming language know that we are done with this line.
good coding practice, he believes that it makes the code a bit cleaner.
Even Google's summarized ES6 style guide continues to require semi-colons. There is a good reason. As developers we should know that when you remove a feature there will inevitably be users who relied on that feature to help them accomplish their task (in this case, we all program and write code :)).

8.
JS is a high level object-oriented, multi-paradigm programming language.
    programming language -> allow us to write code for computer instructions.
    high-level -> we don't have to worry about complex stuff like memory management.
    object-oriented -> mostly based on objects, for storing most kinds of data.
    multi-paradigm -> we can use different styles of programming. /imperative, declarative/ programming.

Role of JS in web development. Why we use it ?

HTML, CSS and JavaScript work all together to create beautiful, interactive, dynamic websites/web applications.
HTML -> content of the page /text, buttons, images/.
CSS -> presentation of the HTML content /styling, laying out the elements/ on a webpage.
JS -> programming language of the internet. /interactive and dynamic effects/ to any webpage,
manipulation of content or css, load data from remote servers, building applications in the browser -> called web applications.

HTML -> nouns, CSS -> adjectives, JavaScript -> verbs.
<p></p>, p {color: red}, p.hide()

recap:
JS is used for dynamic effects and applications in the browser(web applications).
web apps almost same as on our computers and phones every day.

JS libraries and frameworks -> React, Angular, Vue
Tools that make writing modern, large scale web applications easier and faster.
All these libraries and frameworks are still 100% based on JS.

- Learn JS properly, before these frameworks.

JS language and the web browser are two seperate things.
When we use  JS in the web browser, we create so called frontend applications.
This means JS can also run outside the browser.
It's possible to use JS on a web server, using techonology called Node.js, which doesn't need browser.
This allows us to create so called backend applications, which are simply app that run on a web server,
and interact with data bases.

In this course we will build frontend web applications.

mention: JS is used to build mobile/desktop applications also. /React Native, Ionic/

JS Releases/Versions.

- 2015 HUGE UPDATE TO the language -> ES2015, more often called ES6.
ES -> EcmaScript
2015, 2016, ... -> Modern JS /every year - new updates to JS./

- Learn modern JavaScript from beginning, but without forgetting the older parts. /ES5/ -> important stuff  will be shown in course.

9.
starter folder has html file because,
JS is attached to webpages. At least when we build frontend applications.

JS needs to be attached to HTML doc.

<script> tag allows writing JS in html file.
when js is between script tags, it's called inline script.
+ we dont load another file.
- pretty bad for seperating website content from JS logic.
! JS code needs to be seperated from HTML file. 
Seperation OF CONCERNS. / between presentation and logic. / 

script.js name is common when its content is JS script.

inline script tag is added in head tag, right below  the style tag, if any.

console is an environment for executing small pieces of code. /kinda testing/

! ! ! WHEN LINKING FILE SCRIPT TAG is at the end of the body tag. ! ! !
linking js file to html file -> <script src="./app.js"></script>
when the js file is in same folder as the html file, src="script.js", full path is NOT needed.


10.
value is a piece of data.
we store value in variables, so we can reuse them.
let name = 'Antoan' -> declaring a variable. and saves it in PC's memory.

naming conventions

    camelCase - variables, functions /firstName, title, sumTwoNumbers, add/.

    cannot start with digit /WRONG -> 3yearsOld/.

    can ONLY contain letters, numbers, underscores and dollar sign $.

    Always start with lowercase letter.

    variables with all upper case letters are for constants(the values will never change).
    ex. let PI = 3.14;

    descriptive names -> important for clean code.

12. Data types

Every value in JS is either an object OR a primitive data type. 
A value is a primitive when it's not an object.

let me = {                  let firstName = 'Tony';
    name: 'Tony'            let number = 3;
};

7 primitive data types:
- number -> floating point number, used for decimals and integers / 5.25, 3 ( is actually 3.00) /
- string -> sequence of characters, used for text. /"Tony"/
- boolean -> logical type only true or false -> used for taking decisions / let isClicked = true; /
- undefined -> value taken by a variable that is declared but not defined yet('empty value') / let isClicked; /
- null -> also means 'empty value', but is used in different situations.
- symbol (ES2015/ES6) -> value that is unique and cannot be changed (not useful for now).
- big int (ES2020/ES11) -> larger integers that number type can't hold.

! JS has dynamic typing => when creating a new variable, you do not have to manually define the data type.
!! The value has a type, NOT the variable. Variables simply store values WHICH values have types.

We can assign two different types of values to the same variable. line 1: let test = 1 | line 4: let test = "Tony".
No problem at all.

Use comments to describe code below if needed or dividing code into different sections.
U can also ignore code , can be useful. // comment ctrl + /

!! JS is interpreted language, which means its executed from top to bottom.

!! typeof is an operator. same as +, - operators.

let keyword is when declaring a new variable. Can't redeclare a variable.
When changing value of declared variable, let is not needed.

!! undefined IS BOTH THE VALUE AND THE DATA TYPE. 
    let firstName; // defining a varaible WITH NO value.
    console.log(firstName); // returns undefined as value of the variable.
    console.log(typeof firstName); // returns undefined as type in string format.

!!!!!
// error in typeof operator!
console.log(typeof null); // returns object, which is bug. It should return null just lke undefined data type
// not resolved because of legacy reasons.

13. let, const, var
let and const were introduced in ES6. => they are modern JS.

var is old way.

let is used to declare variables that can change during execution of the program.

const is when we declare a variable that are NOT supposed to change during execution of the program

A value of a const variable can NOT be changed.

? !! LET OR CONST ?
As a best practice, for writing clean code.
It's recommended to use const BY DEFAULT, 
and let only when u are really sure that the variable needs to be changed at some point.

Changing variables can lead to bugs.

When using const - variable naming convention ? UPPER_CASE or no ?

Do not use var.  

When use uppercase for const variables?
    In previous lection you sayed that the name of the const-variable should be in uppercase.
    I knew, in this code, the variables are simple examples.
    But when should i definitly write the const variables in uppercase?

1 reply
Jonas - Instructor
Hi Leo,

    The uppercase is more for things that are really impossible to change,
    like pi or Plank's constant or anything like that.
    We will use uppercase constant also in the forkify project in Section 18 :)
Jonas


// !!!!!!!!
// use const BY DEFAULT, let when u are rEALLY SURE that the variable
// needs to change at some point in future.
!
As a general rule, you should always declare variables with const,
if you realize that the value of the variable needs to change,
go back and change it to let.

// 14. Basic Operators

what is operator ? 
- transforms/combine values. All kind of work with values.
arithmetic, comparison, logic, assignment operators and many more.

// 15. Operator Precedence

17. Strings and Template Literals

const secondMessage = `I'm ${firstName}`;
const secondMessage = `I'm ${firstName}, a ${year- birthYear} years old ${currentJob}`;


// 18. Taking Decisions: if


